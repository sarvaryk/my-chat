{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","inbox","ws","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","Error","filter","args","call","TextInput","state","value","props","focus","setState","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","alt","onEmailChange","onClick","href","preventDefault","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","m","forceUpdate","removeAllEventListener","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","LeftPane","c","firstMessage","user","tag","text","sendContactRequest","map","key","selectedConversation","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","loginSuccessful","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4f5bdadd.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from \"./chat\";\r\nimport { EventProducer } from \"./EventProducer\";\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n    inbox: InboxDto | null = null;\r\n\r\n    private ws: WebSocket;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"open\", () => {\r\n\r\n        });\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch( \"login\" );\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch( \"message\", cid, p.message );\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch( \"conversation\", p.conversation.channelId );\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\nexport var proxy = new Proxy();","export class EventProducer<M> {\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n    removeEventListener(type: string, listener) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n    protected dispatch(type: string, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./TextInput.css\"\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions> {\r\n    state = { value: this.props.value, focus: false };\r\n\r\n    componentWillReceiveProps(value) {\r\n        this.setState(value)\r\n    }\r\n\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value} { ...attrs }\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} \r\n                    />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './Proxy';\r\nimport { TextInput } from './TextInput';\r\n\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" alt=\"\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email} onChange={e => this.onEmailChange(e)} onEnter={ () => this.onClick() } autofocus={ true } />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={ () => this.onClick() }/>\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName }\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={ () => this.onClick() }/>}\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onEmailChange(e: String) {\r\n        this.setState({ email: e }); \r\n        if(e === \"JCVW2K\")\r\n            this.setState({displayName: \"Krisztián\"});\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });            \r\n    }\r\n}\r\n","import { Component } from \"react\";\r\nimport { TextInputOptions, TextInput } from \"./TextInput\";\r\nimport React from \"react\";\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { ConversationDto } from \"./chat\";\r\nimport { Component } from \"react\";\r\nimport React from \"react\";\r\nimport { proxy } from \"./Proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n}","import { ConversationDto, InboxDto } from \"./chat\";\r\nimport { Component } from \"react\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport React from \"react\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\nimport React from \"react\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({\r\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\r\n            , contentType: 0, content: \"J: \" + text\r\n        });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport React from \"react\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RightPane\";\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Login } from './Login'\r\nimport { proxy } from './Proxy';\r\nimport { Main } from './Main';\r\n\r\nexport default class App extends Component {\r\n  state = { loginSuccessful: false }\r\n\r\n  componentDidMount() {\r\n      proxy.addEventListener(\"login\", () => this.setState({ loginSuccessful: true}), this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        { this.state.loginSuccessful ? <Main /> : <Login /> }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}